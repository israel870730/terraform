Healthcheck

Introduction

Resiliency is one of the key aspect that must be considered when designing a mission-critical, highly-available application in the cloud-native microservices architecture to ensure that 
the application is resilent to quickly recover from any failures. By default, Kubernetes monitors the state of the Pods using its controllers for Deployments, ReplicaSets, DaemonSets, StatefulSets, etc. 
and attempts to restart it or reschedule it to other node when it detects that the pod has crashed. However we also need to monitor the health of container process for any failure from our deployed application 
so that kubernetes can take the action accordingly, for which we can setup Liveness probes and Readiness probes in our application deployment.

Configuration Probes
Probes have a number of fields that you can use to more precisely control the behavior of liveness and readiness checks:

initialDelaySeconds: Number of seconds after the container has started before liveness or readiness probes are initiated. Defaults to 0 seconds. Minimum value is 0.
periodSeconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. timeoutSeconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1.
successThreshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup Probes. Minimum value is 1.
failureThreshold: When a probe fails, Kubernetes will try failureThreshold times before giving up. Giving up in case of liveness probe means restarting the container. In case of readiness probe the Pod will be marked Unready. Defaults to 3. Minimum value is 1.

Liveness probes
The kubelet uses liveness probes to know when to restart a container. For example, liveness probes could catch a deadlock, where an application is running, but unable to make progress. 
Restarting a container in such a state can help to make the application more available despite bugs.

Liveness probes are used in Kubernetes to know when a pod is alive or dead. A pod can be in a dead state for a variety of reasons; Kubernetes will kill and recreate the pod when a liveness probe does not pass.

Liveness Probes make sure your application is running.

livenessProbe:
    # an http probe
    httpGet:
        path: /healthz
        port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3
    
Readiness probes
The kubelet uses readiness probes to know when a container is ready to start accepting traffic. A Pod is considered ready when all of its containers are ready. One use of this signal is to control which Pods are used as backends for Services. When a Pod is not ready, it is removed from Service load balancers.

Sometimes, applications are temporarily unable to serve traffic. For example, an application might need to load large data or configuration files during startup, or depend on external services after startup. In such cases, you don't want to kill the application, but you don't want to send it requests either. Readiness probes are used in Kubernetes to know when a pod is ready to serve traffic. Only when the readiness probe passes will a pod receive traffic from the service; if a readiness probe fails traffic will not be sent to the pod.

Readiness probes make sure your application is ready to serve traffic

readinessProbe:
     # an http probe
     httpGet:
         path: /readiness
         port: 8080
    initialDelaySeconds: 15
    periodSeconds: 3

Lets setup Liveness probes and Readiness probes for our microservice proddetail