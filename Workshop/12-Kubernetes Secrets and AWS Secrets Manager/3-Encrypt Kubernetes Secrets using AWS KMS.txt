Pre-requisite
We assume that you have completed the chapter Deploy Statefulset and have MYSQL database up and running.

Deploy Application Changes
In the previous chapter when we deployed the MYSQL database, a kubernetes secret mysql-secret was created to hold the password for the database. 
The EKS control plane created a Data Encryption Key (DEK) to encrypt the secret, saved the encrypted secret to etcd and used kms:encrypt to encrypt DEK and cached the encrypted DEK.

Let’s use the Kubernetes secret mysql-secret created while deploying the MYSQL StatefulSet in the prodcatalog service to connect to the MYSQL database and show how EKS uses KMS to decrypt 
the Kubernetes secret mysql-secret. Click here (https://github.com/aws-containers/eks-app-mesh-polyglot-demo/blob/master/workshop/apps/product_catalog/app_secrets.py) to see the application code for 
this deployment. Click here () to see the Helm Values details for this deployment.

cd ~/environment/eks-app-mesh-polyglot-demo
helm upgrade --reuse-values -f ~/environment/eks-app-mesh-polyglot-demo/workshop/helm-chart/values-k8s-secret.yaml workshop workshop/helm-chart/


Now we have the following setup as shown below. The prodcatalog service connects to the MYSQL database by using the root password in Kubernetes secret mysql-secret.

Application Testing
Lets also see if we are able to access this newly created mysql database in our Product Catalog Application Our prodcatalog service will access this database to read and write the product details.

Get the Loadbalancer url

export LB_NAME=$(kubectl get svc frontend -n workshop -o jsonpath="{.status.loadBalancer.ingress[*].hostname}")
echo $LB_NAME

It will show the product you created while deploying the MYSQL database in the Product Application UI.

Validate Kubernetes Encryption using KMS
Now let’s validate that AWS KMS was used when we create and use the kubernetes secret.

Log into console and navigate to EKS → Cluster → Overview, you will see the Secrets encryption as shown below

The EKS cluster was created with KMS encryption enabled and that is why you Secrets encryption is enabled.

Make a note of the KMS key ID.

A cloudtrail Decrypt event corresponding to this KMS key ID should be available with sourceIpAddress as eks.amazonaws.com

If you go to CloudTrail  you should see a record available if you search for the Event types Encrypt and Decrypt with output similar to the following screenshot. 
If the event hasn’t shown up yet, wait a few minutes and try again.

This confirms that AWS KMS was used to decrypt the Data Encryption Key which was then used by Kubernetes to decrypt the secret.



